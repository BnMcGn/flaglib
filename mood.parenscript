
(defun freshness-from-warstats (&rest warstats-coll)
  (let* ((hours (lisp *js-hour*))
         (days (* 2 (lisp *js-day*)))
         (now (chain -date (now)))
         (newest (max
                  (mapcar (lambda (warstats) (@ warstats tree-freshness))
                          warstats-coll))))
    (cond ((< newest (- now days)) "old")
          ((< newest (- now hours)) "recent")
          (t "new"))))

;;Also in lisp
(defun flavor-from-warstats (&rest warstats-coll)
  "Creates a flavor descriptor from a collation of all the warstats passed in. Needs to handle multiple warstats collections because it is used for excerpts which may represent multiple opinions."
        ;;; controv: The opinions are themselves contested
        ;;; positive: Relatively uncontested postive opinions
        ;;; negative: Relatively uncontested negative opinions
        ;;; We return contested if there are significant values in both positive and negative
        ;;; We return contested if controv is significant
        ;;; Neutral if none of the three are significant.
  (labels ((significant (n1 n2)
             "is n1 significant related to n2?"
             (when (< 0 n1)
               (if (>= n1 n2)
                   t
                   (if (< 0.7 (relative-to-range 0 n2 n1))
                       t
                       nil)))))
    (let ((controv 0)
          (positive 0)
          (negative 0))
      (dolist (warstats warstats-coll)
        (cond
          ((significant (@ warstats controversy) (@ warstats effect))
           (incf controv (@ warstats controversy)))
          ((eql "pro" (@ warstats direction))
           (incf positive (@ warstats effect)))
          ((eql "con" (@ warstats direction))
           (incf negative (@ warstats effect)))))
      (let ((top (max controv positive negative)))
        (cond
          ((> 0.5 top) "neutral")
          ((significant controv top) "contested")
          ((eql top positive)
           (if (significant negative positive)
               "contested"
               "positive"))
          ((eql top negative)
           (if (significant positive negative)
               "contested"
               "negative")))))))

(defun flavor-from-own-warstats (warstats)
  ;;FIXME: old will go away
  (if (has-property warstats "x-supported")
      (flavor-from-own-warstats-old warstats)
      (let* ((effect (@ warstats effect))
             (controv (@ warstats controversy))
             (pos (+ (@ warstats x-right) (@ warstats x-up)))
             (neg (+ (@ warstats x-wrong) (@ warstats x-down)))
             ;;FIXME: Not very sophisticated. Want something clearer for each of these.
             ;; Possibly need the visibility system
             (badflags (+ (get/d warstats "spam" 0)
                          (get/d warstats "inflammatory" 0)
                          (get/d warstats "languageWarning" 0)
                          (get/d warstats "disturbing" 0)
                          (get/d warstats "logicalFallacy" 0)
                          (get/d warstats "outOfBounds" 0)
                          (get/d warstats "redundant" 0)
                          (get/d warstats "outOfDate" 0)
                          (get/d warstats "retraction" 0)
                          (get/d warstats "incorrectFlag" 0)
                          (get/d warstats "flagAbuse" 0)
                          (get/d warstats "offtopic" 0)
                          (get/d warstats "arcane" 0)))
             (goodflags (+ (get/d warstats "interesting" 0)
                           (get/d warstats "funny" 0)))
             (diff (relative-to-range 0 effect controv)))
        (if (< 0 (+ effect goodflags))
            (if (> diff 0.7)
                "contested"
                (if (and (> 10 effect) (< 0 badflags))
                    "contested"
                    "positive"))
            (if (< 0 neg)
                "negative"
                "neutral")))))

;;FIXME: Crude, doesn't account for target type, doesn't represent problematic
(defun flavor-from-own-warstats-old (warstats)
  "Used to give a basic display of the status of a target. Uses own warstats. "
  (let* ((effect (@ warstats effect))
         (controv (@ warstats controversy))
         (pos (+ (@ warstats x-right 0) (@ warstats x-supported 0)))
         (neg (+ (@ warstats x-wrong 0) (@ warstats x-dissed 0)))
         (irrel (@ warstats x-irrelevant 0))
         (unver (@ warstats x-unverified 0))
         (probl (@ warstats x-problematic 0))
         (diff (relative-to-range 0 effect controv)))
    (if (< 0 effect)
        (if (> diff 0.7)
            "contested"
            "positive")
        (if (< 0 neg)
            "negative"
            (if (< 0 probl)
                "contested"
                "neutral")))))

(defun flavor/freshness (warstats &rest ids)
  (let ((wcoll (collecting
                 (dolist (id ids)
                   (when (has-property warstats id)
                     (collect (getprop warstats id)))))))
    (chain (apply #'flavor-from-warstats wcoll)
           (concat "-" (freshness-from-warstats wcoll)))))

;;; This section is for setting up data attributes in the opinion display, so that moods
;;; can be rendered by css


(defun magnitude (item &optional (keyfunc (lambda (x) x)))
  "Because CSS doesn't support greater than/ less than."
  (let ((val (keyfunc item)))
    (cond
      ((< 200 val) 4)
      ((< 50 val) 3)
      ((< 10 val) 2)
      ((< 3 val) 1)
      (t 0))))

(defun format-warstats-data (stor stats)
  (let ((keylist
          (create controversy :data-controversy effect :data-effect
                  reference-controversy-extra :data-reference-controversy-extra
                  reference-controversy-main :data-reference-controversy-main
                  reference-effect-extra :data-reference-effect-extra
                  reference-effect-main :data-reference-effect-main  replies-immediate
                              :data-replies-immediate replies-total :data-replies-total))
        (xlist
          (create x-right :data-x-right x-wrong :data-x-wrong
                  x-up :data-x-up x-down :data-x-down
                  ;;FIXME: Rest are probably obsolete
                  x-up :data-x-supported x-down :data-x-dissed
           x-dissed :data-x-dissed  x-irrelevant :data-x-irrelevant
                  x-problematic :data-x-problematic
                  x-supported :data-x-supported  x-unverified :data-x-unverified)))
    (do-keyvalue (k v keylist)
      (when (has-property stats k)
        (setf (getprop stor v) (getprop stats k))
        (setf (getprop stor (strcat v "-m")) (magnitude (getprop stats k)))))
    (do-keyvalue (k v xlist)
      (let ((val (getprop stats k)))
        (when val
          (setf (getprop stor (strcat v "-effect")) (@ val 0))
          (setf (getprop stor (strcat v "-effect-m")) (magnitude (@ val 0)))
          (setf (getprop stor (strcat v "-controversy")) (@ val 1))
          (setf (getprop stor (strcat v "-controversy-m")) (magnitude (@ val 1))))))
    (let ((referenced (if (@ stats :referenced)
                          (@ stats :referenced length)
                          0)))
      (setf (@ stor :data-referenced) referenced)
      (setf (@ stor :data-referenced-m) (magnitude referenced)))))

(defun format-opinion-data (stor opinion)
  (setf (@ stor :data-flag) (@ opinion flag 1))
  (setf (@ stor :data-flag-category) (@ opinion flag 0))
  (setf (@ stor :data-votevalue) (@ opinion votevalue)))
;;Add datestamp?

(defun format-looks-data (stor id looks)
  (if looks
      (progn (if (chain looks (has-own-property id))
                 ;; If it is a string, it came from the server. Was looked before the last page reload.
                 (unless (equal (typeof (getprop looks id)) "string")
                   (setf (@ stor :data-looked) "recent"))
                 (setf (@ stor :data-looked) "false"))
             (setf (@ stor :data-looks-available) "true"))
      (setf (@ stor :data-looks-available) "false")))

(defun format-reference-data (stor reference)
  (when reference
    (setf (@ stor :data-is-reference) t)
    (when (@ reference :refbot)
      (setf (@ stor :data-refbot) t))))

(defun format-depth-data (stor tree-address display-depth)
  (when (or tree-address display-depth)
    (setf (@ stor :data-display-depth)
          (if display-depth
              display-depth
              (@ tree-address length)))))

(defun format-styling-data (props)
  ;;Wants: opinion-store, warstats
  ;;Optional: tree-address (if opinion), references (if reference)
  (let* ((res (create))
         (opinion (when (has-property props 'opinion)
                    (@ props opinion)))
         ;;FIXME: opid lookup may become obsolete
         (opid (if (has-property props 'tree-address)
                   (list-last (@ props tree-address))
                   (and opinion (@ opinion id))))
         (ws-store (if (has-property props 'warstats-store)
                       (@ props warstats-store)
                       (@ props warstats)))
         (url (or (and opinion (@ opinion url)) (and (has-property props 'url) (@ props url))))
         (warstats (when ws-store
                     (if opid
                         (if (has-property ws-store opid)
                             (getprop ws-store opid)
                             (getprop ws-store url))
                         (if (has-property ws-store url)
                             (getprop ws-store url)
                             (@ ws-store root))))))
    (when warstats
        (format-warstats-data res warstats))
        ;;(say (+ "Format-styling-data: warstats not found for: " opid " root: " (@ props url))))
    (format-looks-data res (or opid :root) (@ props looks))
    (when opid
      (format-opinion-data res (getprop (@ props opinion-store) opid))
      (when (@ props references)
        (format-reference-data res (getprop (@ props references) opid))))
    (format-depth-data res (@ props tree-address) (@ props display-depth))
    (if (@ props extra-styling)
        (copy-merge-all res (@ props extra-styling))
        res)))

(defun format-reference-styling-data (refdata)
  (let ((stor {}))
    (when (@ refdata 'warstats-src-url)
      (format-warstats-data stor (@ refdata :warstats)))))



