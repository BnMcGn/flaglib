
;; Depends on titlebar-components displayables target-article target-thread target-summary

(def-component simple-tabs
  nil
  (defun render ()
    (psx
     (:div
      :class "react-tabs"
      (:ul
       :key "x"
       :class "react-tabs__tab-list"
       (collecting
         (dotimes (i (prop tab-labels length))
           (collect
               (psx
                (:li
                 :key i
                 :class (if (eql i (prop tmode))
                            "react-tabs__tab react-tabs__tab--selected"
                            "react-tabs__tab")
                 :on-click (let ((x i))
                             (lambda ()
                               (setf (@ window location href)
                                     (update-url-parameter (@ window location href) "tmode" x))))
                 (getprop (prop tab-labels) i)))))))
      (getprop (prop children) (or (prop tmode) 0))))))

(def-component target-tabs
  nil
  (defun render ()
    (psx
    (:simple-tabs
     :tmode (prop tmode)
     :tab-labels (list "Article View" "Comment View" "Summary")
     (:target-root-article :key 1 :... (@ this props))
     (:target-root-thread :key 2 :... (@ this props))
     (:target-root-summary :key 3 :... (@ this props))))))

(def-component target-root
  nil
  (defun render ()
    (psx
     (:look-saver-for-rooturl
      (:look-loader
       :looks (prop looks)
       (:target-tabs
        :... (@ this props)))))))

(def-component look-loader
    ;;FIXME: Looks should be loaded directly from server. Needs REST or something.
  ((set-state :looks (prop looks)))
  (defun render ()
    (chainl :reacl -React -children
            (map (prop children)
                 (lambda (child)
                   (react clone-element child (create :looks (state looks)
                                                      'look-handler (@ (thisref) look-handler)))))))

  (defun look-handler (opinid)
    (when (state looks) ;;Are looks enabled?
      (unless (getprop (state looks) opinid)
        (when (prop username)
          (json-post-bind (res "/look-post/" (create :opinion opinid))))
        (set-state looks (set-copy (state looks) opinid t))))))

(def-component look-saver-for-rooturl
  nil
  (defun render ()
    (prop children))

  (defun component-did-mount ()
    (when (prop username)
      (json-post-bind (res "/look-post/" (create :root (prop rootid)))))))

;;New target stuff

;;FIXME: This is not reliably retrying on "wait"
(def-component text-server-client
    ((set-state :data (create text "" title "")
                :interval (or (prop interval) 3000)
                :attempts (or (prop attempts) 10)))
  (defun render ()
    (chainl :reacl -react -children
            (map (prop children)
                 (lambda (child)
                   (react clone-element child (state data))))))

  (defun component-did-mount ()
    (chain this (load-from-server)))

  (defun load-from-server ()
    (json-bind (results "/text-server/" (:url (prop url)))
               (let ((data (create text (@ results text)
                                   title (@ results title)
                                   'text-status (@ results status)
                                   'text-message (@ results message))))
                 (case (@ results status)
                   ("success" (set-state data data))
                   ("failure" (set-state data data))
                   ("redirect" (set-state data data))
                   ("wait"
                    (if (< 0 (state attempts))
                        (progn
                          (set-state data data attempts (1- (state attempts)))
                          (set-timeout (@ this load-from-server) (state interval)))
                        (progn
                          (setf (@ data text-status) "failure"
                                (@ data text-message) "Timed out")
                          (set-state data data)))))))))

(def-component new-target
  nil
  (defun render ()
    (psx
     (:text-server-client
      :url (prop url)
      (:new-target-body :... (@ this props))))))

;;FIXME: this duplicates some stuff from warflagger:generate-rooturl-warstats
(defun blank-warstat ()
  (create
   :root
   (create
    'controversy 0 'effect 0 'x-supported (list 0 0) 'x-dissed (list 0 0) 'x-wrong (list 0 0)
    'x-right (list 0 0) 'x-problematic (list 0 0) 'x-unverified (list 0 0) 'x-irrelevant (list 0 0)
    'replies-total 0 'replies-immediate 0 'looks nil 'tree-freshness nil
    'reference-effect-main 0 'reference-controversy-main 0
    'reference-effect-extra 0 'reference-controversy-extra 0 'referenced nil 'referenced-effect 0)))

(def-component new-target-body
  nil
  (defun render ()
    (if (or (eq "redirect" (prop text-status)) (eq "success" (prop text-status)))
        (psx (:target-root-article
              :text (prop text)
              :opinions (list)
              :url (prop url)
              ;;FIXME: It might not be new by the time the link is followed. We should check.
              :opinion-store (create)
              :warstats (blank-warstat)))
        (psx (:text-missing
              :... (@ this props)
              :warstats (blank-warstat))))))

;; Display of missing text:
;; What can the user do about a missing text?
;; FIXME: check that the opinion form will allow a non-found excerpt to be posted.
;; Why might the text be missing?
;; - text-server has not had time to process. Wait
;; - 404 error. User might supply the text, or supply an alternate URL.
;; - robots.txt forbids. User could supply.
;; - Copyright issue. Original publisher forbids us from displaying whole text. Can we check
;; excerpts while not displaying text?
;; - Misc. error. User can supply text.
;; - Textract decides that text is too large. What was the user trying to do???
;; - User can post declaration that a given page contains a given text at a given date. Other users
;; can dispute the truth of this.
;; FIXME: we do not have such a mechanism at this time.

(def-component text-missing
  nil
  (defun render ()
    (psx
     (:div
      (:target-title
       :key 1
       :... (@ this props))
      (:h3
       :style (create 'font-style "italic" :background "lightgrey")
       :key 2
       "Text from article at " (url-domain (prop url)) " is not currently available." )
      (:h4
       :key 3
       "Reason: " (prop text-message))
      (:ul :key 4
           (:li :key 1
                "You may still post flags on this article, though excerpts must be filled by hand.")
           (:li :key 2
                "If the same text is available at another URL, please indicate the alternative with the SameThing flag.")
           (:li :key 3
                "Texts may be manually inserted using [not implemented]"))))))



