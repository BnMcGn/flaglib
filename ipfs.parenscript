
;;Won't use for now.
;;(setf ipfs (require "ipfs"))
(setf sxp (require "s-expression"))

;;FIXME: Need something more dynamic
(defparameter *seed-node* "/dns6/ipfs.thedisco.zone/tcp/4430/wss/p2p/12D3KooWChhhfGdB9GJy1GbhghAAKCUR99oCymMEVS4eUcEy67nt")

;;(defparameter *gateway* "https://ipfs.fleek.co")
(defparameter *gateway* "https://logintest.warflagger.com:5000")
(defparameter *ipns-host* (lisp wf/local-settings:*ipns-host*))

;;FIXME: how do we handle node shutdown?
;; - timer: 30 seconds without activity?
;;   - or X seconds absolute.
;; - anyone with access to the node can shut it down. That's kind of bad manners.

;;NOTE: Unused for now.
(def-component ipfs-node
    ((set-state node (when (has-property window :inode) (@ window inode))
                shutdown-timer nil)
     (chain this (create-node))
     (chain this (start-shutdown-timer)))

  (defun render ()
    (collecting
      (dolist (child (ensure-array (prop children)))
        (collect
            (react clone-element child (create inode (state node)))))))

  (defun create-node ()
    (chain ipfs (create)
           (then (lambda (node)
                   (chain node swarm (connect *seed-node*))
                   (set-state node node)))
           (catch (lambda (err)
                    (say err)
                    (say "IPFS node creation failed")))))

  (defun stop-node ()
    (say "Shutting down IPFS node")
    (chain (state node) (stop)))
  ;;Default shutdown is 10 minutes

  (defun start-shutdown-timer (&optional (interval (* 1000 60 10)))
    (when (state shutdown-timer)
      (clear-timeout (state shutdown-timer)))
    (set-state shutdown-timer (set-timeout (@ (thisref) stop-node) interval))))

;;Target loaders should:
;; - load opinion-store for target
;; - load warstats for target and for opinions
;; - load indexes for references and for questions
;; - load page text/ page title / opinion texts and titles
;; - some of these things should be delegated
;;
(def-component target-iloader
    ((set-state :opinion-tree nil :opinions (list)))
  (defun render ()
    (if (not-empty (state opinions))
        (let ((child-element (prop child)))
          (psx
           (:entity-store-loader
            :key 1
            :rooturls (list (prop rooturl))
            :opinions (state opinions)
            (:child-element :key 1 :url (prop rooturl) :tmode (prop tmode)))))
      (psx (:div "Loading..."))))

  (defun component-did-mount ()
    (text-bind (tree (rooturl-data-url (prop rooturl) "opinion-tree") ())
               (set-state opinions (flatten (sxp tree))))))

;; What is references supposed to be?
;; Does it include the opins?

(defun opinion-data-url (iid type)
  (+ *gateway* "/ipns/" *ipns-host* "/opinions/" iid "/" type ".data"))

(defun rooturl-data-url (rooturl type)
  (+ *gateway* "/ipns/" *ipns-host* "/rooturls/"
     (encode-u-r-i-component (encode-u-r-i-component rooturl)) "/" type ".data"))

(defun remove-leading-comment (text)
  (if (equal ";" (@ text 0))
      (let ((lines (chain text (split (newline)))))
        (chain lines (splice 1) (join (newline))))
      text))

(defun parse-sexp-data (data)
  (sxp (remove-leading-comment data)))

(defun first-upcase (s)
  (+ (chain s (char-at 0) (to-upper-case)) (chain s (slice 1) (to-lower-case))))

(defun keyword-to-js-name (str)
  (unless (eq #\: (@ str 0))
    (error "Not a keyword"))
  (let ((parts (chain str (slice 1) (split "-"))))
    (chain (list6 (chain (@ parts 0) (to-lower-case))
                  :... (mapcar #'first-upcase (chain parts (slice 1))))
           (join ""))))

(defun plist-to-object (plist)
  (let ((res (create)))
    (do-window ((k v) plist :size 2 :step 2)
      (setf (getprop res (keyword-to-js-name k)) v))
    res))

(defun proc-opinion (opin)
  (let ((opinion (plist-to-object (parse-sexp-data opin))))
    (when (has-property opinion "flag")
      (setf (@ opinion flag) (mapcar #'keyword-to-js-name (@ opinion flag))))
    opinion))

(defun proc-warstat (ws)
  (let ((res (plist-to-object (parse-sexp-data ws))))
    (when (has-property res "direction")
      (setf (@ res direction) (keyword-to-js-name (@ res direction))))
    res))

;; opinion-store, warstats-store, text/title all in one component
(def-component entity-store-loader
  nil

  (defun constructor (props)
    (super props)
    (setf (@ this state)
          (create 'warstats-store (create) 'opinion-store (create)
                  'text-store (create) 'title-store (create)
                  'warstats-tmp (create) 'opinion-tmp (create)
                  'text-tmp (create) 'title-tmp (create)))
    (setf (@ this render) (chain this render (bind this)))
    (setf (@ this component-did-mount) (chain this component-did-mount (bind this)))
    (setf (@ this propagate-updates)
          (chain _ (debounce (chain this propagate-updates (bind this)) 500)))
    this)

  (defun render ()
    (let-context
     ((opinion-store (state opinion-store))
      (warstats-store (state warstats-store))
      (text-store (state text-store))
      (title-store (state title-store)))
     (clone-children (prop children)
                     (create 'warstats-store (state :warstats-store)
                             'opinion-store (state :opinion-store)
                             'text-store (state :text-store)
                             'title-store (state :title-store)
                             opinions (prop opinions)))))

  (defun component-did-mount ()
    (dolist (rurl (prop rooturls))
      (let ((rurl (copy-string rurl)))
        (text-bind (warstats (rooturl-data-url rurl "warstats") ())
                   (set-state warstats-tmp
                              (set-copy (state warstats-tmp) rurl (proc-warstat warstats)))
                   (chain (thisref) (propagate-updates)))
        (text-bind (text (rooturl-data-url rurl "text") ())
                   (set-state text-tmp (set-copy (state text-tmp) rurl (parse-sexp-data text)))
                   (chain (thisref) (propagate-updates)))
        (text-bind (title (rooturl-data-url rurl "title") ())
                   (set-state title-tmp (set-copy (state title-tmp) rurl (parse-sexp-data title)))
                   (chain (thisref) (propagate-updates)))))
    (dolist (iid (prop opinions))
      (let ((iid (copy-string iid)))
        (text-bind (warstats (opinion-data-url iid "warstats") ())
                   (set-state warstats-tmp
                              (set-copy (state warstats-tmp) iid (proc-warstat warstats)))
                   (chain (thisref) (propagate-updates)))
        (text-bind (opinion (opinion-data-url iid "opinion") ())
                   (set-state opinion-tmp (set-copy (state opinion-tmp) iid (proc-opinion opinion)))
                   (chain (thisref) (propagate-updates)))
        (text-bind (text (opinion-data-url iid "text") ())
                   (set-state text-tmp (set-copy (state text-tmp) iid (parse-sexp-data text)))
                   (chain (thisref) (propagate-updates)))
        (text-bind (title (opinion-data-url iid "title") ())
                   (set-state title-tmp (set-copy (state title-tmp) iid (parse-sexp-data title)))
                   (chain (thisref) (propagate-updates))))))

  (defun propagate-updates ()
    (set-state
     warstats-store (create6 :... (state warstats-store) :... (state warstats-tmp))
     opinion-store (create6 :... (state opinion-store) :... (state opinion-tmp))
     text-store (create6 :... (state text-store) :... (state text-tmp))
     title-store (create6 :... (state title-store) :... (state title-tmp))

     warstats-tmp (create)
     opinion-tmp (create)
     text-tmp (create)
     title-tmp (create))))
