
(setf bootform (@ (require "react-bootstrap/Form")))
(setf listgroup (@ (require "react-bootstrap/ListGroup")))
(setf fuse (require "fuse.js"))

(def-component make-opinion
  nil
  (defun render ()
    (psx
     (:div
      :key 1
      (:author-url-loader
       :key 1
       (:bootform
        :key 1
        (:bootform.-group
         :key 1
         (:bootform.-label :key 1 "Target URL")
         (:bootform.-control :key 2 :type "text" :placeholder "Enter a Target")))
       (:display-urls-core
        :key 2
        ))))))


(def-component author-url-loader
  nil
  (defun render ()
    (psx
     (:json-loader
      :key 1
      :store-name "urls"
      :sources (list "/author-url-data/")
      (clone-children (prop children))))))


(defun reformat-urls-lists (&rest lists)
  (collecting
    (dolist (l lists)
      (do-keyvalue (k url l)
        (collect (create :url url :category k))))))

(def-component display-urls-core
  nil
  (defun render ()
    ;;FIXME: should we also search titles, etc?
    (when (prop urls)
      (let ((fus (new (fuse (prop urls) (create :include-score t :keys (list :url))))))
        (if (prop search)
            (psx
             (:display-searched-urls :key 1 :urls (chain fus (search (prop search)))))
            (psx
             (:display-urls-in-categories :key 1 :urls (prop urls))))))))

(def-component display-urls-in-categories
  nil
  (defun render ()
    (let ((labels (create :rooturls "Previous Targets"
                          :references "Previous References"
                          :replies "References from replies to your posts")))
      (psx
       (:div
        :key 1
        (collecting
          (when (prop urls)
            (do-keyvalue (cat items (prop urls))
              (when (not-empty items)
                (when (getprop labels cat)
                  (collect (psx (:div :key cat (getprop labels cat)))))
                (collect
                    (psx
                     (:listgroup
                      :key (+ cat "group")
                     (collecting
                       (dolist (itm items)
                         (collect
                             (psx (:listgroup.-item :key (unique-id) itm)))))))))))))))))


(def-component display-searched-urls
  nil
  (defun render ()
    ))
