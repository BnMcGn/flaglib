(def-component flag-name
  nil
  (defun render ()
    (let ((label (prop opinion flag 1)))
      (psx
       (:span (+ " "
                 (chain label (char-at 0) (to-upper-case))
                 (chain label (slice 1))))))))


(def-component opinion-icon-core
  nil
  (defun render ()
    (let* ((colors (lisp (ps-gadgets:as-ps-data (hu:plist->hash warflagger:*flag-colors*))))
           ;;FIXME: might need to look at 0 too...
           (label (chain (getprop colors (prop flag 1)) (slice 1)))
           (src (strcat "/static/img/small/wf_flag-" label ".svg")))
      (psx (:a :key 0 :href (make-opinion-url (prop opinion))
               (:img :class "opinion-icon" :src src))))))

(def-component opinion-icon
  nil
  (defun render ()
    (let ((icon
            (psx
             (:span
              :class "opinion-badge"
              (:opinion-icon-core :key 0 :opinion (prop opinion) :flag (prop opinion flag))))))
      (if (and (prop opinion-store) (prop warstats) (not (prop disable-tooltip)))
          (:stateful-tip
           :style (popup-style) :position "bottom" :group "one" :arrow "left"
           :parent icon)
          icon))))

(def-component display-tree-address
  nil
  (defun render ()
    ;;FIXME: no opinion store should be needed here
    (get-context
     (opinion-store)
     (let ((opstore (or (prop opinion-store) opinion-store)))
       (psx
        (:span
         :class "tree_address"
         (collecting
           (dolist (id (prop tree-address))
             (unless (eq id (prop tree-address 0))
               (collect " > "))
             (collect
                 (psx
                  (:opinion-icon
                   :key id
                   ;;FIXME: Should maybe have full styling data, which means it should be cached
                   ;; elsewhere
                   :... (if (prop looks)
                            (format-looks-data {} id (prop looks))
                            {})
                   :disable-tooltip (prop disable-tooltip)
                   ;;FIXME: We should just pass in opinion id. Contexts should take care of rest.
                   ;; Except maybe look-handler
                   :opinion (getprop opstore id)
                   :warstats (prop warstats)
                   :opinion-store opstore
                   :look-handler (prop look-handler))))))))))))

;;FIXME: React/CSS version of display-warstats in mood.lisp. Other should probably
;; go away eventually. Or maybe this should be more purely CSS. Use data attributes.
(def-component display-warstats2
  nil
  (defun render ()
    (let ((names (lisp (cons 'create *indicator-names*)))
          (descs (lisp (cons 'create *warstat-text*))))
      (psx
       (:span :class "display-warstats"
              (collecting
               (dolist (k (lisp (cons 'list
                                      (gadgets:map-by-2
                                       (lambda (&rest x) (car x))
                                                *warstat-text*))))
                 (collect
                  (psx (:span
                        :key k
                        :class k
                        (:img
                         :src
                         (strcat "/static/img/" (getprop names k) ".svg")
                         :title (getprop descs k))))))))))))

(defun %plurify (value single multiple)
  (if (< 1 value)
      (strcat (chain value (to-string)) multiple)
      (strcat (chain value (to-string)) single)))

(defun display-date-nicely (dstamp)
  (let ((past (ago dstamp)))
    (say "in display-date-nicely")
    (say dstamp)
    (say (+ "years: " (chain past (get-years))))
    (say (+ "months: " (chain past (get-months))))
    (say (+ "weeks: " (chain past (get-weeks))))
    (say (+ "days: " (chain past (get-days))))
    (say (+ "hours: " (chain past (get-hours))))
    (cond
      ((< 1 (chain past (get-years)))
       (%plurify (chain past (get-years)) " year ago" " years ago"))
      ((< 0 (chain past (get-months)))
       (%plurify (chain past (get-months)) " month ago" " months ago"))
      ((< 0 (chain past (get-weeks)))
       (%plurify (chain past (get-weeks)) " week ago" " weeks ago"))
      ((< 0 (chain past (get-days)))
       (%plurify (chain past (get-days)) " day ago" " days ago"))
      ((< 0 (chain past (get-hours)))
       (%plurify (chain past (get-hours)) " hour ago" " hours ago"))
      ((< 0 (chain past (get-minutes)))
       (%plurify (chain past (get-minutes)) " minute ago" " minutes ago"))
      (t (%plurify (chain past (get-seconds)) " second ago" " seconds ago")))))

(def-component date-stamp
  nil
  (defun render ()
    (psx
     (:span
      (display-date-nicely
       (new (-date (chain -date (parse (prop opinion datestamp))))))))))

;;FIXME: lots of improvement here... Avatar? Stats? Faction?
(def-component author-long
  nil
  (defun render ()
    (psx (:span (prop opinion authorname)))))

(def-component reply-link
  nil
  (defun render ()
    (let ((excerpt (prop excerpt))
          (offset (prop offset)))
      (psx
       (:form :class "opinion-reply" :action "/opinion/" :method "GET"
              :style (create :display "inline-block")
              (:input :type "hidden" :name "target" :key 1
                      :value (prop url))
              (when excerpt
                (psx (:input :type "hidden" :name "excerpt" :key 3
                             :value (encode-u-r-i-component excerpt))))
              (when offset
                (psx (:input :type "hidden" :name "offset" :key 4
                             :value offset)))
              (if excerpt
                  (psx (:input :type "submit"
                               :key 2
                               :title (strcat "Reply to the excerpt: \"" excerpt "\"")
                               :value "Reply to Excerpt"))
                  (psx (:input :type "submit" :value "Reply" :key 2))))))))

(def-component reply-count
  nil
  (defun render ()
    (let* ((immediate (prop warstats replies-immediate))
           (total (prop warstats replies-total))
           (immed (and immediate (chain immediate (to-string))))
           (tot (and total (chain total (to-string)))))
      (psx
       (:span
        :class "reply-count"
        :title
        (strcat immed " direct responses, " tot " in conversation")
        (strcat " (" immed "/" tot ")"))))))

;;FIXME: Headline will get considerably more complex in future. Placeholder.

;;Note: renamed to headline-core to make room for a loader in headline
(def-component headline-core
  nil
  (defun render ()
    (let* ((title (prop title))
           (ext-link (when (prop external-link)
                       (psx (:a :key 1 :href (prop external-link)
                                :title "Original article"
                                (:span :class "headline-external")))))
           (elclass (if title "headline" "headline headline-empty"))
           (domain (if (prop domain)
                       (strcat " (" (prop domain) ")")
                       ""))
           (core (if (not-empty title)
                     (psx (:span :key 2 title domain))
                     (psx (:span :key 2 "[Title Not Available]" domain)))))
      (if (prop url)
          (psx (:span :key 3 :class elclass
                      (:a :key 4 :href (prop url) core) ext-link))
          (psx (:span :key 3 :class elclass core ext-link))))))

(def-component headline
  nil
  (defun render ()
    (if (prop title)
        (psx (:headline-core :... (@ this props)))
        (psx (:text-server-client
              :url (prop external-link)
              (:headline-core :... (@ this props)))))))

(def-component comment-summary
  nil
  (defun render ()
    (let ((comment
            (if (prop comment)
                (prop comment)
                (let ((opin (prop opinion)))
                  (if (chain opin (has-own-property 'comment))
                      (@ opin comment)
                      nil)))))
      (if comment
          (psx (:span
                :style (create 'white-space "nowrap" overflow "hidden" 'text-overflow "ellipsis")
                comment))
          (psx (:span ""))))))

