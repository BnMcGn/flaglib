;; Depends on: titlebar-components
(def-component opinion-line
  nil
  (defun render ()
    (if (< (prop trim) 20)
        (if (prop hide-author)
            (psx (:opinion-line-authorless
                  :... (@ this props)))
            (psx (:opinion-line-short
               :... (@ this props))))
        (psx (:opinion-line-long
              :... (@ this props))))))

(def-component opinion-line-short
  nil
  (defun render ()
    (psx (:div
          :class "summary_line"
          (:opinion-icon :key 1 :opinion (prop opinion))
          ;;(:flag-name :key 2 :opinion (prop opinion))
          (:author-long :key 4 :opinion (prop opinion))))))

(def-component opinion-line-authorless
  nil
  (defun render ()
    (psx (:div
          :class "summary_line"
          (:opinion-icon :key 1 :opinion (prop opinion))
          ;;FIXME: should use (prop trim) rather than 10
          (:comment-summary :key 2 :opinion (prop opinion) :trimto 10)))))

(def-component opinion-line-long
  nil
  (defun render ()
    (psx (:div
          :class "summary_line"
          (:opinion-icon :key 1 :opinion (prop opinion))
          (:flag-name :key 2 :opinion (prop opinion))
          (:date-stamp :key 3 :opinion (prop opinion))
          (:author-long :key 4 :opinion (prop opinion))
          (:comment-summary :key 5 :opinion (prop opinion) :trimto 40)))))

(def-component thing-loader
  nil
  (defun render ()
    (psx
     (:entity-store-loader
      :key 1
      :rooturls
      (collecting
        (dolist (itm (prop things))
          (when (eq (@ itm type) :rooturl) (collect (@ itm id)))))
      :opinions
      (collecting
        (dolist (itm (prop things))
          (when (eq (@ itm type) :opinion) (collect (@ itm id)))))
      :no-text t
      (:thing-displayer
       :key 1
       :trim (prop trim)
       :things (prop things))))))

(def-component thing-displayer
  nil
  (defun render ()
    (get-context
     (opinion-store)
     (collecting
       (dotimes (i (chain (prop things) length))
         (let ((itm (getprop (prop things) i)))
           (cond
             ((eq :rooturl (@ itm type))
              (if (@ itm key)
                  (collect
                   (psx (:target-title
                         :key i
                         :hide-reply t
                         :show-count t
                         :trim (prop trim)
                         :url (@ itm id)
                         ;;FIXME: use rooturl rather than db id
                         :warflagger-link (make-rootid-url (@ itm key)))))
                  (collect
                      (psx
                       ;;FIXME: not sure that target title is right for a ref... use ref block
                       (:reference
                        :key i
                        :hide-reply t
                        :show-count nil
                        :trim (prop trim)
                        :url (@ itm id)
                        :warflagger-link (make-missing-rootid-url (@ itm id)))))))
             ((eq :opinion (@ itm type))
              (let ((opin (getprop opinion-store (@ itm id))))
                (when opin
                  (collect
                     (psx (:opinion-line
                           :key i
                           :hide-author (get/d itm :hide-author nil)
                           :trim (prop trim)
                           :opinion (getprop opinion-store (@ itm id))))))))
             ((eq :author (@ itm type))
              (collect
                  (psx (:div
                        :key i
                        (:author-long
                         :key 1
                         :trim (prop trim)
                         :author (@ itm id)))))))))))))
