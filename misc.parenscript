;;;Paths and urls

;; Also in lisp
(defun make-id-path (id)
  (if (< id 1000)
      "/0000/"
      (strcat "/" (chain id (to-string) (slice 0 -3)) "000/")))

(defun make-warstats-url (id type)
  (strcat "/static/warstats"
          (make-id-path id)
          (chain id (to-string))
          "/"
          (getprop (lisp (ps-gadgets:as-ps-data
                          (hu:plist->alist warflagger:*warstats-path-types*)))
                   type)))

(defun make-rootid-url (rid)
  (strcat "/target/" (chain rid (to-string))))

;;FIXME: Shouldn't use this as identifier. Opinion may not be hosted on this server.
(defun make-opinion-url (opinion)
  (if (has-property opinion "iid")
      (strcat "/o/" (@ opinion iid))
      (strcat "/opinion-page/" (chain (@ opinion id) (to-string)))))

(defun make-missing-rootid-url (url)
  (strcat "/new-target/?url=" (encode-u-r-i-component url)))

(defun make-author-url (author)
  (strcat "/u/" (encode-u-r-i-component author)))

(defun excerpt-reply-link (url excerpt)
  (let ((exstr (when excerpt (strcat "&excerpt=" (encode-u-r-i-component excerpt)))))
    (strcat
     "/opinion/?target="
     (encode-u-r-i-component url)
     exstr)))

    ;;; Tree tools

;;FIXME: votevalue might not remain
(defun opinion-p (itm)
  (and (not (atom itm))
       (chain itm (has-own-property "votevalue"))))

(defun focus-p (props?)
  (if (and (@ props? focus) (not-empty (@ props? focus)))
      (eql (list-last (@ props? tree-address) (list-last (@ props? focus))))
      t))

(defun focus-parent-p (props?)
  (let ((fparent (getprop (chain (@ props? focus) (slice -2)) 0)))
    (when (eql (list-last (@ props? tree-address) fparent))
      (getprop (@ props? opinion-store) fparent)))
  (when
      (eql (list-last (@ props? tree-address)) fparent)))

(defun immediate-children-ids (id opinstore)
  (unless opinstore
    (throw "immediate-children-ids: opinstore can't be null"))
  (if id
      (let ((len (@ (getprop opinstore id) 'tree-address length)))
        (collecting
          (dolist (itm (all-descendant-ids id opinstore))
            (when (eq (1+ len) (@ (getprop opinstore itm) 'tree-address length))
              (collect itm)))))
      (collecting
        (do-keyvalue (k opin opinstore)
          (when (eq 1 (@ opin 'tree-address length))
            ;;FIXME dual source
            (collect (or (@ opin id) (@ opin iid))))))))

(defun all-descendant-ids (id opinstore)
  (if id
      (collecting
        (do-keyvalue (k opin opinstore)
          (let ((ta (@ opin 'tree-address)))
            (when (chain ta (find (lambda (x) (equal x id))))
              (collect k)))))
      (chain -object (keys opinstore))))

(defun opinion-descendant-p (opin1 opin2)
  "Is opin2 a descendant of opin1?"
  (let ((id (when (has-property opin1 "id") (@ opin1 id)))
        (iid (when (has-property opin1 "iid") (@ opin1 iid))))
    (dolist (ids (@ opin2 tree-address))
      (when (or (eql ids id) (eql ids iid))
        (return-from opinion-descendant-p t)))
    nil))

;; Opinion sorter

(defun opinion-date-cmp (opin1 opin2)
  "Compare opinions by their date fields"
  (let ((d1 (if (has-property opin1 "created") (@ opin1 created) (@ opin1 datestamp)))
        (d2 (if (has-property opin2 "created") (@ opin2 created) (@ opin2 datestamp))))
    (cond
      ((eql d1 d2) 0)
      ((< d1 d2) 1)
      (t -1))))

(defun opinion-peerlike-cmp (opin1 opin2 opinion-store)
  (let ((tad1 (@ opin1 tree-address))
        (tad2 (@ opin2 tree-address)))
    (dotimes (i (@ tad1 length))
      (unless (eql (getprop tad1 i) (getprop tad2 i))
        (return-from opinion-peerlike-cmp
          (opinion-date-cmp (getprop opinion-store (getprop tad1 i))
                            (getprop opinion-store (getprop tad2 i))))))))

(defun make-opinion-cmp (opinion-store)
  "Return a func that compares two opinions. Provide opinion ids, not opinions. Opinions are compared by their position in the opinion tree. Ancestors come before descendants. If the opinions are peers, they are ordered by date."
  (lambda (a b)
    (if
     (eql a b)
     0
     (let ((opin1 (getprop opinion-store a))
           (opin2 (getprop opinion-store b)))
       (cond
         ((opinion-descendant-p opin1 opin2) -1)
         ((opinion-descendant-p opin2 opin1) 1)
         (t (opinion-peerlike-cmp opin1 opin2 opinion-store)))))))

;;; Excerpt and text tools

;; Also in lisp
(defun create-textdata (text)
  (let ((res (create :text text :whitespace (create)))
        (found nil))
    (dotimes (i (length text))
      (when (member (elt text i) *whitespace-characters*)
        (unless found (setf found i))
        (dolist (j (range found (1+ i)))
          (incf (getprop res 'whitespace j)))
        (setf found nil)))
    res))

;; Also in lisp
(defun contiguous-whitespace? (tdat index)
  (or (getprop tdat 'whitespace index) 0))

;; Also in lisp
(defun excerpt-here? (tdat excerpt index)
  (let ((exdat (create-textdata excerpt))
        (text (@ tdat text)))
    (loop with tind = index
          with eind = 0
          with tlen = (length text)
          with elen = (length excerpt)
          do (progn
               (when (eq elen eind) (return-from excerpt-here? tind))
               (when (eq tlen tind) (return-from excerpt-here? nil))
               (let ((ewhite (contiguous-whitespace? exdat eind))
                     (twhite (contiguous-whitespace? tdat tind)))
                 (if (and (eq 0 ewhite) (eq 0 twhite)
                          (eq (elt excerpt eind) (elt text tind)))
                     (progn (incf tind) (incf eind))
                     (if (or (eq 0 ewhite) (eq 0 twhite))
                         (return-from excerpt-here? nil)
                         (progn (incf tind twhite)
                                (incf eind ewhite)))))))))

;; Also in lisp
(defun find-excerpt-position (tdat excerpt &optional (offset 0))
  (dotimes (i (length (@ tdat text)))
    (let ((loc (excerpt-here? tdat excerpt i)))
      (when loc
        (if (< 0 offset)
            (decf offset)
            (return (list i (- loc i))))))))

;; Also in lisp
(defun previous-break (text index)
  (let ((res (chain text (substring 0 index) (last-index-of #\linefeed))))
    (when (<= 0 res)
      res)))

;; Also in lisp
(defun next-break (text index)
  (let ((res (chain text (substring (1+ index)) (index-of #\linefeed))))
    (when (<= 0 res)
      (+ res 1 index))))

;; Also in lisp
(defun excerpt-context (text position1 position2)
  (let*
      ((text (chain text (trim)))
       (tlength (@ text length))
       (estart position1)
       (eend (+ position2 estart))
       (tstart (previous-break text estart))
       (tend (next-break text eend))
       (leading-context (chain text (slice (if tstart (1+ tstart) 0) estart)))
       (excerpt (chain text (slice estart eend)))
       (trailing-context (chain text (slice eend (or tend tlength)))))
    (create :leading leading-context :trailing trailing-context :excerpt excerpt)))

(defun clean-string-for-excerpt (the-string)
  (collecting-string
    (let ((last-was-white nil))
      (dotimes (i (length the-string))
        (if (member (elt the-string i) *whitespace-characters*)
            (unless last-was-white
              (setf last-was-white t)
              (collect #\ ))
            (progn
              (setf last-was-white nil)
              (collect (elt the-string i))))))))

(defun calculate-offset (tdat excerpt startloc)
  (if (not-empty excerpt)
      (let ((res 0))
        (dotimes (i startloc)
          (when (excerpt-here? tdat excerpt i)
            (incf res)))
        res)
      nil))

(defun get-location-excerpt (tdat start end)
  (let* ((excerpt (chain tdat text (slice start end)))
         (excerpt (clean-string-for-excerpt excerpt))
         (offset (calculate-offset tdat excerpt start)))
    (list excerpt offset)))

(defun find-excerpt-start/end (tdat excerpt &optional (offset 0))
  (let ((pos (find-excerpt-position tdat excerpt offset)))
    (when pos
      (list (elt pos 0) (+ (elt pos 0) (elt pos 1))))))

(defun rebreak (text)
  (chain (collecting
           (dolist (string (chain text (split #\linefeed)))
             (collect string)
             (collect (psx (:br :key (unique-id))))))
         (slice 0 -1)))

(defun %overlap-p (start1 end1 start2 end2)
  (not (or (> start1 end2) (> start2 end1))))

;;Also in lisp
;;Find all the indices where excerpts start or stop.
(defun excerpt-segment-points (opset end)
  "End is the length of the text."
  (chain
   (collecting-set
       (dolist (itm opset)
         (collect (@ itm text-position 0))
         (collect (+ (@ itm text-position 0) (@ itm text-position 1))))
     (collect 0)
     (collect (1+ end)))
   (sort (lambda (a b) (- a b)))))

(defun has-excerpt-p (opin)
  (chain opin (has-own-property :excerpt)))

(defun has-found-excerpt-p (opin)
  (and (has-excerpt-p opin)
       (@ opin 'text-position)
       (not (equal null (@ opin 'text-position 0)))))

;;Misc tools
(defun filter-opins-score (tree-addresses opinions warstats)
  (let ((res
          (collecting
            (dolist (ta tree-addresses)
              (let ((id (list-last ta)))
                (when (and (has-property warstats id) (< 2 (getprop warstats id 'effect)))
                  (collect id)))))))
    (chain res
           (sort (lambda (a b) (- (getprop warstats a 'effect)
                                  (getprop warstats b 'effect)))))
    res))

(defun filter-opins-controversial (tree-addresses opinions warstats)
  (let ((res
          (collecting
            (dolist (ta tree-addresses)
              (let ((id (list-last ta)))
                (when (and (has-property warstats id) (< 2 (getprop warstats id 'controversy)))
                  (collect id)))))))
    (chain res
           (sort (lambda (a b) (- (getprop warstats a 'controversy)
                                  (getprop warstats b 'controversy)))))
    res))

(defun filter-opins-question (tree-addresses opinions warstats)
  (let ((res
          (collecting
            (dolist (ta tree-addresses)
              (let* ((id (list-last ta))
                     (opin (getprop opinions id))
                     (stats (getprop warstats id))
                     ;;FIXME: remove old warstats support
                     (wrongness (and stats
                                     (if (arrayp (@ stats x-wrong))
                                         (@ stats x-wrong 0) (@ stats x-wrong)))))
                (when
                    ;;FIXME: This is a crude definition of a question. Reconsider
                    ;; if/when we implement "Accepted" flag. Also if directives
                    ;; are added.
                    ;; FIXME: Maybe question/answer should be decided during warstats calc
                    (or (chain (list "needsEvidence" "raiseQuestion")
                               (includes (@ opin flag 1)))
                        ;; Wrong axis is a stand in for being answered. For now.
                        (and wrongness (< 1 wrongness)))
                  (collect id)))))))
    (chain res
           (sort
            ;; Have arbitrarily decided to sort by combined controversy and effect
            (lambda (a b) (- (+ (getprop warstats a 'controversy)
                                (getprop warstats a 'effect))
                             (+ (getprop warstats b 'controversy)
                                (getprop warstats b 'effect))))))
    res))

(let ((counter 0))
  (defun unique-id ()
    (incf counter)))

;; React context definitions

;;(defcontext warstats {})
(defcontext warstats-store {})
(defcontext opinion-store {})
(defcontext title-store {})
(defcontext text-store {})

;;FIXME: do we drop headlines for title-store?
(defcontext headlines {})


