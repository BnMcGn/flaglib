

(setf tool-tip (@ (require "react-portal-tooltip") default))
(setf stateful-tip (@ (require "react-portal-tooltip") -stateful-tool-tip))

;;FIXME: Overall use of url, external-link, warflagger-link is inconsistent.
(def-component target-title
  nil
  (defun render ()
    (get-context
     (warstats-store
      title-store)
     (let ((warstats (cond
                       ((has-property warstats-store (prop url))
                        (getprop warstats-store (prop url)))
                       ((and (prop warstats) (has-property (prop warstats) "root"))
                        (prop warstats root))
                       (t nil)))
           (title (or (and (prop title-key)
                           (getprop title-store (prop title-key)))
                      (prop title))))
       (psx
        (:rooturl-warstyles
         :key 1
         :rooturl (prop url)
         (:div
          :key 1
          (:div
           :class (if warstats
                      (strcat (flavor-from-own-warstats warstats) "-old target-title")
                      "")
           (or (prop intro-text) "Target Page: ")
           (:headline :key 1
                      :title title
                      :url (prop warflagger-link)
                      :external-link (prop url))
           (:display-warstats2 :key 2)
           (prop children)
           (unless (prop hide-reply)
             (psx (:reply-link
                   :key 3
                   :url (prop url)
                   :excerpt (prop reply-excerpt)
                   :offset (prop reply-offset))))
           (when (and warstats (prop show-count))
             (psx (:reply-count :key 4 :warstats warstats)))))))))))

(defun popup-side (position)
  (if position
      (if (< (* (chain -math (abs (@ position right))) 2)
             (chain -math (abs (@ position left))))
          "right"
          "left")
      "left"))

(defun %find-parent-hilited (element)
  (if element
      (if (equal "hilited" (@ element class-name))
          element
          (%find-parent-hilited (@ element parent-element)))))

(defun is-selection-in-single-hilited-text? (selection)
  (let ((parent1 (%find-parent-hilited (@ selection anchor-node))))
    (and (not (@ selection is-collapsed))
         parent1
         (eq parent1 (%find-parent-hilited (@ selection focus-node))))))

(def-component hilited-segment
    ((set-state :viewable false :position nil))
  (defun render ()
    (get-context
     (opinion-store warstats-store)
     (psx
      (:span
       :key 1
       :id (prop id)
       :style (create font-weight :bold position :relative)
       :class (apply #'flavor/freshness (prop warstats) (prop excerpt-opinions))
       :on-mouse-enter (@ this handle-mouse-enter)
       :on-mouse-leave (@ this handle-mouse-leave)
       :ref
       (lambda (el)
         (when el
           (let ((res (position-difference
                       (chain document (get-element-by-id (prop hilited-text-id)))
                       el)))
             (unless (chain _ (is-equal (state position) res))
               (set-state position res)))))
       :... (create :data-segment-count
                    (let ((count (%get-replies-count (prop excerpt-opinions) (@ this props))))
                      (if (< 1 count) count "")))
       (rebreak (prop text))
       (:tool-tip :key "a1"
                  :style (popup-style)
                  :active (and (state viewable) (not (prop hide-popup)))
                  :position "bottom"
                  :group "one"
                  :arrow (popup-side (state position))
                  :parent (strcat "#" (prop id))
                  (:sub-opinion-list
                   :opinion-store opinion-store
                   :warstats-store warstats-store
                   :... (@ this props)))))))


  (defun handle-mouse-enter (e)
    (when (prop dispatch)
      (funcall (prop dispatch)
               (create :type 'set-indicated
                       :data
                       (immediate-children-ids (prop id-of-text) (prop opinion-store)))))
    (set-state viewable true))

  (defun handle-mouse-leave (e)
    (when (prop dispatch)
      (funcall (prop dispatch)
               (create :type 'clear-indicated
                       :data
                       (immediate-children-ids (prop id-of-text) (prop opinion-store)))))
    (set-state viewable false)))

(def-component plain-segment
  nil
  (defun render ()
    (psx
     (:span :style (create font-weight :normal)
            (rebreak (prop text))))))

(def-component parent-segment
  nil
  (defun render ()
    (let ((focussed (focus-parent-p (@ this props))))
      (psx
       (:span :style (create font-weight :bold position :relative)
              :class (if focussed "parent-active" "parent-inactive")
              :key (unique-id)
              (rebreak (prop text))
              (when (and nil ;;Disable for  now
                         focussed
                         (eql (prop last-char-pos)
                              (+ (@ focussed 0 text-position 0)
                                 (@ focussed 0 text-position 1))))
                ;;FIXME: obsolete
                (psx (:opinion :opinions focussed
                               :key (unique-id)
                               :focus (prop focus)
                               :focusfunc (prop focusfunc)
                               :looks (prop looks)
                               :look-handler (prop look-handler)
                               :tree-address (prop tree-address)))))))))

(defun %make-segments (text props)
  (collecting
    (let* ((current-id (when (@ props tree-address)
                         (list-last (@ props tree-address))))
           (opstore (@ props opinion-store))
           (opins (immediate-children-ids current-id opstore))
           (segpoints (excerpt-segment-points
                       (collecting
                         (dolist (id opins)
                           (let ((opin (getprop opstore id)))
                             ;;FIXME: Should warn on missing opinion? Might just not be loaded yet.
                             (when (and opin (has-found-excerpt-p opin))
                               (collect opin)))))
                       (length text))))
      (do-window ((start end) segpoints)
        (let* ((id (strcat "lvl-"
                           (chain props
                                  tree-address length (to-string))
                           "-pos-"
                           (chain end (to-string))))
               (common-data
                 (create 'excerpt-opinions
                         (remove-if-not
                          (lambda (id)
                            (let ((opin (getprop opstore id)))
                              (and opin
                                   (has-found-excerpt-p opin)
                                   (%overlap-p
                                    start (1- end)
                                    (@ opin 'text-position 0)
                                    (+ (@ opin 'text-position 0)
                                       (@ opin 'text-position 1) (- 1))))))
                          opins)
                         :key id
                         :id id
                         :text (chain text (slice start end))
                         :id-of-text current-id
                         :focusfunc (@ props focusfunc)
                         :looks (@ props looks)
                         :warstats (@ props warstats)
                         :references (@ props references)
                         'opinion-store (@ props opinion-store)
                         'hilited-text-id (@ props hilited-text-id)
                         'root-target-url (@ props root-target-url)
                         'look-handler (@ props look-handler)
                         'hide-popup (@ props hide-popup)
                         :dispatch (@ props dispatch)
                         tree-address (@ props tree-address))))
          (cond ((< (@ common-data 'excerpt-opinions length) 1)
                 (collect
                     (psx (:plain-segment
                           :... common-data))))
                ((focus-p props)
                 (collect
                     (psx (:hilited-segment
                           :... common-data))))
                (t
                 (collect
                     (psx (:parent-segment
                           :... common-data
                           :focus (@ props focus)
                           :last-char-pos end))))))))))

(def-component hilited-text
  nil
  (defun render ()
    (get-context
     (text-store opinion-store warstats-store)
     (psx
      (:hilited-text-core
       :key 1
       :... (@ this props)
       ;;FIXME: dual supply
       :text (or (let ((stor (and (prop text-key) (getprop text-store (prop text-key)))))
                   (when stor
                     (@ stor text)))
                 (prop text))
       :opinion-store (or (prop opinion-store) opinion-store)
       :warstats (or (prop warstats) warstats-store))))))

(def-component hilited-text-core
    ((set-state :id (strcat "hilited-text-" (unique-id))))
  (defun render ()
    (psx
     (:div
      :class
      (if (focus-p (@ this props)) "hilited" "hilited-parent")
      :key (state id)
      :id (state id)
      :on-click (lambda (e) (chain e (stop-propagation)))
      :on-mouse-up (@ this selection-change)
      :on-key-press (@ this selection-change)
      (when (prop text)
        ;;Stray whitespace can confuse location of reply to excerpt, hence the trim
        (%make-segments (chain (prop text) (trim))
                        (set-copy (@ this props)
                                  'hilited-text-id
                                  (state id)))))))

  (defun selection-change (ev)
    (when (prop dispatch)
      (if (is-selection-in-single-hilited-text? (chain rangy (get-selection)))
          (let* ((textel (chain document (get-element-by-id (state id))))
                 (range (chain rangy (get-selection) (get-range-at 0)
                               (to-character-range textel)))
                 (excerpt (get-location-excerpt (create-textdata (chain (prop text) (trim)))
                                                (@ range start) (@ range end))))
            (funcall
             (prop dispatch)
             (create :type :selection
                     :range range
                     :excerpt (getprop excerpt 0)
                     :offset (getprop excerpt 1))))
          (funcall
           (prop dispatch)
           (create :type :selection
                   :range false :excerpt "" :offset 0))))))

;;FIXME: This looks broken
(defun %get-replies-count (opinion-ids props)
  (let ((total 0))
    (dolist (op opinion-ids)
      (incf total))
                                        ;(incf total (@ props warstats op replies-total)))
    total))

(def-component sub-opinion-list
    nil
    (defun render ()
      (let-context
       ((opinion-store (prop opinion-store))
        (warstats-store (prop warstats-store)))
       (psx
        (:div
         :key 1 :class "sub-opinion-list"
         (:a :key 2 :class "action"
             :href (excerpt-reply-link (if (not-empty (prop tree-address))
                                           (@ (getprop (prop opinion-store)
                                                       (list-last (prop tree-address)))
                                              url)
                                           (prop root-target-url))
                                       (prop text))
             "Reply to the excerpt")
         (if (< 1 (@ (prop excerpt-opinions) length))
             (collecting
               (dolist (itm (prop excerpt-opinions))
                 (collect
                     (let ((opin (getprop (prop opinion-store) itm)))
                       (psx
                        (:opinion-summary
                         :key (unique-id)
                         :... (@ this props)
                         :tree-address (@ opin tree-address)
                         :opid itm))))))
             (let ((opin (getprop (prop opinion-store) (prop excerpt-opinions 0))))
               (psx
                (:opinion-info
                 :key 3
                 :... (@ this props)
                 :tree-address (@ opin tree-address)
                 :opinion opin)))))))))

(defparameter *opinion-body-grid*
  (create :display "grid"
          align-items "center"
          grid-template-columns "auto auto auto auto auto"
          grid-template-rows "1.8em"
          column-gap "0.5em"
          :border "solid 3px black"))

;;; Opinion-info is used in popups and sub-opinion-list. Not meant to be a complete view of opinion.
(def-component opinion-info
  nil
  (defun render ()
    (get-context
     (warstats-store opinion-store)
     (let* ((opinion (prop opinion))
            ;;FIXME: Until opinion-store is completely moved to context
            (opinion-store (if (not-empty opinion-store) opinion-store (prop opinion-store)))
            (refdat (when (and (prop references)
                               (chain (prop references)
                                      (has-own-property (prop opinion id))))
                      (getprop (prop references) (prop opinion id)))))
       (psx
        (:opinion-warstyles
         :key 1
         :opinion opinion
         :references (prop references)
         (:div
          :key 0
          :style (create :display "grid" grid-template-columns "30px auto"
                         margin-left "0px" background-color "white")
          :on-click (lambda ()
                      (setf (@ window location) (make-opinion-url opinion)))
          (:opinion-icon :key 1 :opinion opinion)
          (:div
           :key 2
           :style *opinion-body-grid*
           (:flag-name :key 2 :opinion opinion)
           (:date-stamp :key 3 :opinion opinion)
           (:author-long :key 4 :opinion opinion)
           (:display-warstats2 :key 5)
           (:div :key 6 :class "opinion-comment-wrapper"
                 :style (create grid-column-start 1 grid-column-end 6 overflow :overlay)
                 (when (@ opinion comment)
                   (psx (:div :key 8 :class "opinion-comment" (rebreak (@ opinion comment)))))
                 (:div
                  :key 12
                  :class "opinion-extras"
                  (when refdat
                    (psx (:reference
                          :key 10
                          :... refdat
                          :minify t
                          :styling-data
                          (format-reference-styling-data refdat))))))))))))))

(def-component excerptless-opinions
  nil
  (defun render ()
    (get-context
     (opinion-store warstats-store)
     (let* ((ta-len (when (prop tree-address) (@ (prop tree-address) length)))
            ;;FIXME: context source
            (opinion-store (or (prop opinion-store) opinion-store))
            (idlist (immediate-children-ids (when (not-empty (prop tree-address))
                                              (list-last (prop tree-address)))
                                            opinion-store))
            (idlist (chain idlist (sort (make-opinion-cmp opinion-store)))))
       (if (< 0 (@ idlist length))
           (psx
            (:div
             :key 1
             :class "excerptless"
             :style (create 'margin-top "2em")
             (psx (:h3 :key 1 "Replies:"))
             (:div
              :key 2
              :style (create :position :relative :left (or (prop comment-left) "0px"))
              (collecting
                (dolist (opid idlist)
                  (let ((opin (getprop opinion-store opid)))
                    (unless (has-excerpt-p opin)
                      (collect
                          (psx
                           (:on-screen
                            :key opid
                            (:thread-opinion
                             :... (@ this props)
                             :opid opid
                             :tree-address (@ opin tree-address)
                             :reference (getprop (prop references) opid))))))))))))
           null)))))

;;; Opinion-summary is used to display opinions in one line situations. It may be displayed with
;;; tree address icons.
(def-component opinion-summary
  nil
  (defun render ()
    (get-context
     (opinion-store warstats-store)
     ;;FIXME: Next 2 bindings should go away eventually
     (let* ((opinion-store (or (prop opinion-store) opinion-store))
            (warstats-store (or (prop warstats) warstats-store))
            (opinion (@ opinion-store
                        (or (prop opid)
                            (list-last (prop tree-address)))))
            ;; FIXME: Can have multiple copies of opinion on same page. Shouldn't use id!
            (id (strcat "opinion-summary-" (@ opinion id))))
       (psx
        (:opinion-warstyles
         :key 1
         :opinion opinion
         (:div
          :id id
          :key 0
          :class "opinion-summary"
          (if (prop opid)
              (psx (:opinion-icon :key 1 :opinion opinion
                                  :look-handler (prop look-handler)))
              (psx (:display-tree-address :key 1 :tree-address (prop tree-address)
                                          :opinion-store opinion-store
                                          :warstats warstats-store
                                          :looks (prop looks)
                                          :look-handler (prop look-handler))))
          (:flag-name :key 2 :opinion opinion) " "
          (:date-stamp :key 3 :opinion opinion) " "
          (:author-long :key 4 :opinion opinion) " "
          (:display-warstats2 :key 5)
          (:reply-link :key 6 :url (@ opinion url))))))))

  (defun component-did-catch (err err-info)
    (say "Something missing in opinion-summary")
    (say (@ this props))
    (say err)
    (say err-info)))

;;;Used to show the context of an excerpt, especially when the full text is not being displayed.
(def-component thread-excerpt
  nil
  (defun render ()
    (let ((leading (prop leading-context))
          (trailing (prop trailing-context))
          (excerpt (prop excerpt))
          (opinion (prop opinion)))
      (unless (or leading trailing excerpt)
        (if (and opinion (has-property opinion 'leading))
            (progn
              (setf leading (@ opinion leading))
              (setf trailing (@ opinion trailing))
              (setf excerpt (@ opinion excerpt)))
            (when (prop text)
              (let ((econtext (excerpt-context
                               (prop text)
                               (prop opinion text-position 0) (prop opinion text-position 1))))
                (setf leading (@ econtext leading))
                (setf trailing (@ econtext trailing))
                (setf excerpt (@ econtext excerpt))))))
      (if (or leading trailing excerpt)
          (let ((classes (collecting
                           (collect "thread-excerpt")
                           (when (not-empty leading) (collect "fade-start"))
                           (when (not-empty trailing) (collect "fade-end")))))
            (psx
             (:div
              :... (create :found-excerpt "true")
              :class (chain classes (join " "))
              (:span :key 1 (rebreak leading))
              (:span :key 2 :class (flavor/freshness (prop warstats) (prop opinion id))
                     (rebreak excerpt))
              (:span :key 3 (rebreak trailing)))))
          (psx
           (:div
            :... (create :found-excerpt nil)
            (prop opinion excerpt)))))))

(def-component reference
  nil
  (defun render ()
    (let ((styling (prop styling-data)))
      (unless styling
        (setf styling (create :data-replies-total 0))
        (format-looks-data styling :root (prop looks)))
      (when (prop minify)
        (setf (@ styling :data-reference-minify) t))
      (psx
       (:div
        :class "reference"
        :... styling
        (if (prop refd-opinion-id)
            (psx (:reference-excerpt-display :... (propsref)))
            (psx (:reference-default-display :... (propsref)))))))))

(def-component reference-default-display
  nil
  (defun render ()
    (psx
     (:headline
      :key 1
      ;; let context take over
      ;;:title (prop headline title)
      :domain (prop reference-domain)
      :url (prop warflagger-link)
      :external-link (unless (prop minify)
                       (when (not (equal (prop reference) (prop warflagger-link)))
                         (prop reference)))
      (:display-warstats2)))))

(def-component reference-excerpt-display
  nil
  (defun render ()
    (get-context
     (opinion-store)
     (let* ((opinion (getprop (or (prop opinion-store) opinion-store) (prop refd-opinion-id)))
            (treead (when opinion (@ opinion tree-address)))
            (deep (when treead (< 1 (@ treead length))))
            (description (if (and opinion (has-excerpt-p opinion))
                             (if deep
                                 "Excerpt from discussion of article at "
                                 "Excerpt from article at ")
                             (if deep
                                 "Opinion from discussion of article at "
                                 "Opinion on article at "))))
       (psx
        (:stateful-tip
         :key 1
         :class "refd-opinion"
         :style (popup-style)
         :position "bottom"
         :group "one"
         :arrow "left"
         :parent
         (psx
          (:span
           :style (if opinion
                      (create :display "inline-flex")
                      (create))
           (when opinion
             (psx (:opinion-icon-core :key 0 :opinion opinion :flag (@ opinion flag))))
           (:headline
            :key 1
            :title (+ description (prop reference-domain))
            :url (prop warflagger-link)
            :external-link (unless (prop minify)
                             (when (not (equal (prop reference) (prop warflagger-link)))
                               (prop reference)))
            (:display-warstats2))))
         ;;FIXME: Fix the styling on these
         ;(:div
         ; :key 0
         ; :style (create :background-color "white")
          ;(when opinion (psx (:target-title :key 101 :url (@ opinion rooturl) :intro-text "Article: ")))
          ;(when (and deep opinion)
          ;  (psx
          ;   (:display-tree-address :key 100 :disable-tooltip t :tree-address (@ opinion tree-address)))))
         (when opinion
           (psx
            (:div
             :key 102
             :style (set-copy *opinion-body-grid* 'background-color "white")
             (:flag-name :key 2 :opinion opinion)
             (:date-stamp :key 3 :opinion opinion)
             (:author-long :key 4 :opinion opinion)
             (:display-warstats2 :key 5)
             (:div :key 6 :class "opinion-comment-wrapper"
                   :style (create grid-column-start 1 grid-column-end 6)
                   (when (has-excerpt-p opinion)
                     (psx (:thread-excerpt
                           :key 7
                           :opinion opinion
                           ;;FIXME: warstats should come from context
                           :warstats
                           (create-from-list
                            (list (prop refopinid) (prop warstats)
                                  (prop refd-opinion-id) (prop refd-opinion-warstats)))
                           :excerpt (prop refd-opinion-excerpt)
                           :leading-context (prop refd-opinion-leading)
                           :trailing-context (prop refd-opinion-trailing))))
                   (when (@ opinion comment)
                     (psx (:div :key 8 :class "opinion-comment" (rebreak (@ opinion comment)))))
                   (:div
                    :key 12
                    :class "opinion-extras"
                    )))))))))))

(def-component question
  nil
  (defun render ()
    (get-context
     (opinion-store)
     (let ((opinion (or (prop opinion)
                        (getprop opinion-store (prop opinionid)))))
       (psx
        (:div
         :key 1
         :class "question"
         ;;FIXME: would be nice if this could happen in comment summary
         ;; :style (create 'white-space "nowrap" overflow "hidden" 'text-overflow "ellipsis")
         :... (prop styling-data)
         (:span
          (if opinion
              (psx (:a :href (make-opinion-url opinion)
                       :key 1
                       (:comment-summary :... (@ this props) :truncate 120)))
              (psx (:comment-summary :... (@ this props) :truncate 120))))))))))

(def-component thread-opinion
  ((set-state))
  (defun render ()
    (get-context
     (opinion-store warstats-store)
     (let ((opinion (@ opinion-store (prop opid))))
       (when opinion
         (let* ((tree-address (@ opinion tree-address))
                (parentid (when (< 1 (@ tree-address length))
                            (@ tree-address (- (@ tree-address length) 2))))
                (parent (when parentid (getprop opinion-store parentid)))
                (text (if parent
                          (if (has-property parent 'comment)
                              (@ parent comment)
                              "")
                          (prop text))))
           (psx
            (:opinion-warstyles
             :key 1
             :opinion opinion
             (:div
              :key 1
              :class (chain "opinion-thread depth-"
                            (concat (@ tree-address length (to-string))))
              :on-click (lambda (e)
                          (setf (@ window location)
                                (make-opinion-url opinion))
                          (chain e (stop-propagation)))
              (:opinion-icon :key 1 :opinion opinion
                             :look-handler (prop look-handler) :looks (prop looks)) " "
                             ;;FIXME: should use *opinion-body-grid*?
                             (:flag-name :key 2 :opinion opinion) " "
                             (:date-stamp :key 3 :opinion opinion) " "
                             (:author-long :key 4 :opinion opinion) " "
                             (:display-warstats2 :key 5)
                             (:reply-link :key 6 :url (@ opinion url)
                                          :excerpt (state :reply-excerpt) :offset (state :reply-offset))
                             (:div
                              :key 9 :class "opinion-comment-wrapper"
                              :style (create :overflow :overlay)
                              (when (has-excerpt-p opinion)
                                (if (has-found-excerpt-p opinion)
                                    (psx (:thread-excerpt
                                          :key 7
                                          :opinion opinion
                                          :warstats warstats-store
                                          :text text))
                                    (psx (:thread-excerpt
                                          :key 7
                                          :opinion opinion
                                          :warstats warstats-store))))
                              (when (@ opinion comment)
                                (psx
                                 (:hilited-text
                                  :key 8
                                  :text (@ opinion comment)
                                  :tree-address tree-address
                                  :focus tree-address
                                  :warstats warstats-store
                                  :opinion-store opinion-store
                                  :dispatch (@ this dispatch)
                                  :hide-popup t
                                  :looks (prop looks)
                                  :look-handler (prop look-handler))))
                              (:div
                               :key 12
                               :class "opinion-extras"
                               (when (prop reference)
                                 (psx (:reference :key 10
                                                  :... (prop reference)
                                                  :styling-data
                                                  (format-reference-styling-data (prop reference)))))
                               (when (prop question)
                                 (psx (:question :key 11
                                        ;:... (prop question)
                                                 )))))))))))))

  (defun dispatch (action)
    (when (eq (@ action type) :selection)
      (set-state :reply-excerpt (@ action excerpt)
                 :reply-offset (@ action offset))))

  (defun component-did-update ()
    (when (prop is-visible)
      (funcall (prop look-handler) (prop opid)))))



