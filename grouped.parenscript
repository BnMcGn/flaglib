(def-component grouped
  nil
  (defun render ()
    (psx
     (:div :style (create 'margin-bottom "2em" position "relative")
           :key 1
           :class "grouped"
           (when (prop warstats)
             (collecting
              (dolist (itm (prop group))
                (cond
                  ((eq (@ itm rowtype) :rooturl)
                   (collect
                    (if (getprop (prop warstats) (@ itm rootid))
                        (psx
                         (:direction-arrow
                          :key (unique-id)
                          :id (@ itm refid)
                          :display-depth (@ itm display-depth)
                          :... (@ this props)
                          (:target-title
                           :style (create :margin-left "0px")
                           :key (unique-id)
                           :hide-reply t
                           :show-count t
                           :intro-text " "
                           :warflagger-link (make-rootid-url (@ itm rootid))
                           :extra-styling
                           (grouped-styling-data itm (@ (thisref) props))
                           :warstats (getprop (prop warstats) (@ itm rootid))
                           :... itm
                           )))
                        (psx (:div :key (unique-id) "Loading...")))))
                  ((eq (@ itm rowtype) :reference)
                   (collect
                    (psx
                     (:direction-arrow
                      :key (unique-id)
                      :id (@ itm refid)
                      :display-depth (@ itm display-depth)
                      :... (@ this props)
                      (:reference
                       :key (unique-id)
                       ;;FIXME: URL generation should only be in one place!
                       ;;:headline {}
                       :styling-data
                       (create :data-display-depth (@ itm display-depth)
                               :data-replies-total 0)
                       ;;:warflagger-link (@ itm 'warflagger-link)
                       ;;:reference-domain (url-domain (@ itm url))
                       ;;:reference (@ itm url)
                       :opinion-store (prop opinion-store)
                       :warstats (prop warstats)
                       :... itm)))))
                  ((eq (@ itm rowtype) :question)
                   (collect
                    (psx
                     (:question
                      :key (unique-id)
                      :comment (@ itm comment)
                      :opinion (getprop (prop opinion-store) (@ itm id))
                      :warstats (getprop (prop warstats) (@ itm rootid))
                      ;;FIXME: Want grouped-styling-data for direction-on-root arrow?
                      ;;FIXME: Might want full styling-data, but need opinion-store
                      :styling-data
                      (create :data-display-depth (@ itm display-depth)
                              :data-replies-total 0)
                      :... itm))))))))))))

(defun popup-style ()
  (create
   :style
   (create
    :background "rgba(255, 255, 255, 0.7)"
    :padding "7px")
   'arrow-style
   (create
    :background "transparent"
    'border-bottom-color "transparent")))

;;FIXME: This duplicates tooltip display code from opinion-icon.
(def-component direction-arrow
  ((set-state :viewable false :unid (unique-id)))
  (defun render ()
    (let* ((elid (strcat "direction-arrow-" (state unid)))
           (opinion (getprop (prop opinion-store) (prop id)))
           (warstats (when opinion
                       ;;FIXME: warstats are not formatted correctly.
                       (getprop (prop warstats) (@ opinion rooturl))))
           (warstat (when warstats
                      (getprop warstats (prop id))))
           (imgsrc (when warstat
                     (strcat "/static/img/direction-" (@ warstat 'direction-on-root) ".svg"))))
      (psx
       (:div
        :style (create :position :relative)
        (:span :class "direction-arrow"
               :id elid
               :key 4
               :... (create :data-display-depth (prop display-depth))
               :style (create :position :absolute
                              :top "-7px"
                              :left "-24px")
               :on-mouse-enter (@ this handle-mouse-enter)
               :on-mouse-leave (@ this handle-mouse-leave)
               (:display-if
                :key 0
                :test imgsrc
                (:img
                 :key 0
                 :style (create :width "18px" :height "45px")
                 :src imgsrc))
               (:display-if
                :key 1
                :test (and (prop opinion-store) (prop warstats))
                (:tool-tip
                 :key 1
                 :active (state viewable)
                 :style (popup-style)
                 :position "bottom"
                 :arrow "left"
                 :group "two"
                 :parent (strcat "#" elid)
                 (:opinion-info
                  :... (@ this props)
                  :warstats warstats
                  :opinion opinion))))
        (prop children)))))

  (defun handle-mouse-enter (e)
    (set-state viewable true)
    ;;FIXME: looks disabled here. Does it make sense to enable? Perhaps we aren't seeing enough
    ;; of the conversation?
    (when (and nil (prop opinion-store) (prop warstats)) ;Wasn't looked at! see above.
      (funcall (prop look-handler) (prop id))))

  (defun handle-mouse-leave (e)
    (set-state viewable false)))

(defun %grouped-warstats-urls (group)
  (let ((res (create)))
    (dolist (item group)
      (when (chain item (has-own-property :rootid))
        (setf (getprop res (@ item rootid))
              (make-warstats-url (@ item rootid) 'warstats))))
    res))

(defun grouped-styling-data (data props)
  (let* ((pardata
           (when (@ data refparent)
             (getprop (@ props warstats) (@ data refparent))))
         (warstats
           (when pardata
             (getprop pardata (@ data refid)))))
    (if warstats
        (create :data-direction (@ warstats 'direction-on-root))
        (create))))

(def-component grouped-loaderx
  nil
  (defun render ()
    (psx
     (:json-loader
      :key 1
      :store-name "warstats"
      :sources (%grouped-warstats-urls (prop group))
      :reducer #'copy-merge-all
      (:prop-to-context
       :key 1
       :propname :warstats
       :context warstats
       (:grouped :key 1 :... (@ this props)))))))

(def-component grouped-loader
  nil
  (defun render ()
    (psx
     (:json-loader
      :key 1
      :sources (list "/static/warstats/grouped.json")
      (:grouped-core :key 1 :... (propsref))))))

(def-component grouped-core
  nil
  (defun render ()
    (let-context
     ((opinion-store (prop opinion-store))
      (warstats-store (prop warstats-store))
      (headlines (prop headlines)))
     (collecting
       (dolist (group (prop groups))
         (collect (psx (:grouped :key 1 :keywords (prop keywords) :group (prop group)))))))))

(def-component opinion-store-loader
  nil
  (defun render ()
    (psx
     (:json-loader
      :store-name 'opinion-store
      :sources (mapcar (lambda (id) (make-warstats-url id :opinions)) (prop rootids))
      :reducer
      (lambda (store incoming)
        (let ((res (reformat-opinions incoming)))
          (copy-merge-all store (@ res 1))))
      (prop children)))))

(def-component grouped-main
  nil
  (defun render ()
    (psx
     (:div
      (:h2 :key 1 "Discussions:")
      (:grouped-loader :key 2)))))

(def-component grouped-mainx
  nil
  (defun render ()
    (psx
     (:div
      (:h2 :key "a1" "Discussions:")
      (:opinion-store-loader
       :key 2
       :rootids (unique (collecting
                         (dolist (group (prop data))
                           (dolist (itm group)
                             (when (chain itm (has-own-property :rootid))
                               (collect (@ itm rootid)))))))
       (collecting
        (dolist (group (prop data))
          (collect
           (psx (:grouped-loader
                 :key (unique-id)
                 :group group))))))))))


