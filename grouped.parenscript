(def-component grouped
  nil
  (defun render ()
    (psx
     (:div :style (create 'margin-bottom "2em" position "relative")
           :key 1
           :class "grouped"
           (when (prop group)
             (collecting
               (dolist (itm (prop group))
                 (when (eql (@ itm display-depth) 0)
                   (collect
                       (psx (:div :key "b"
                             (:hashtags :key "a" :keywords (getprop (prop keywords) (@ itm url)))))))
                 (cond
                   ((eq (@ itm rowtype) :rooturl)
                    (collect
                        (psx
                         (:direction-arrow
                          :key (unique-id)
                          :id (@ itm refid)
                          :display-depth (@ itm display-depth)
                          :... (@ this props)
                          (:target-title
                           :style (create :margin-left "0px")
                           :key (unique-id)
                           :hide-reply t
                           :show-count t
                           :intro-text " "
                           :warflagger-link (make-rootid-url (@ itm rootid))
                           :... itm)))))
                   ((eq (@ itm rowtype) :reference)
                    (collect
                        (psx
                         (:direction-arrow
                          :key (unique-id)
                          :id (@ itm refid)
                          :display-depth (@ itm display-depth)
                          :... (@ this props)
                          (:reference
                           :key (unique-id)
                           ;;FIXME: URL generation should only be in one place!
                           ;;:headline {}
                           :styling-data
                           (create :data-display-depth (@ itm display-depth)
                                   :data-replies-total 0)
                           ;;:warflagger-link (@ itm 'warflagger-link)
                           ;;:reference-domain (url-domain (@ itm url))
                           ;;:reference (@ itm url)
                                        ;:opinion-store (prop opinion-store)
                                        ;:warstats (prop warstats)
                           :... itm)))))
                   ((eq (@ itm rowtype) :question)
                    (collect
                        (psx
                         (:question
                          :key (unique-id)
                          :opinionid (@ itm id)
                          ;:comment (@ itm comment)
                                        ;:opinion (getprop (prop opinion-store) (@ itm id))
                                        ;:warstats (getprop (prop warstats) (@ itm rootid))
                          ;;FIXME: Want grouped-styling-data for direction-on-root arrow?
                          ;;FIXME: Might want full styling-data, but need opinion-store
                          :styling-data
                          (create :data-display-depth (@ itm display-depth)
                                  :data-replies-total 0)
                          :... itm))))))))))))


;;FIXME: Placeholder. Will want links to hashtag page(s). Will want to limit quantity.
(def-component hashtags
  nil
  (defun render ()
    (psx
     (:h4
      :key 1
      :class "aside"
      (collecting
        (dolist (ht (prop keywords))
          (collect
              (psx (:span :key (unique-id) ht " ")))))))))

(def-component direction-arrow
  nil
  (defun render ()
    (get-context
     (opinion-store warstats-store)
     (psx
      (:div
       :key 1
       :style (create :position :relative)
       (if (prop id)
           (let* ((opinion (getprop (or opinion-store (prop opinion-store)) (prop id)))
                  (warstat (getprop warstats-store (@ opinion url)))
                  (direction (@ warstat 'direction-on-root))
                  (imgsrc (when warstat
                            (strcat "/static/img/direction-" direction ".svg"))))
             (list
              (psx
               (:span :class "direction-arrow"
                      :key 4
                      :... (create :data-display-depth (prop display-depth))
                      :style (create :position :absolute
                                     :top "-7px"
                                     :left "-24px")
                      (:display-if
                       :key 0
                       :test imgsrc
                       (:stateful-tip
                        :key 1
                        :style (popup-style)
                        :position "bottom"
                        :arrow "left"
                        :group "two"
                        :parent
                        (psx
                         (:img
                          :key 0
                          :style (create :width "18px" :height "45px")
                          :src imgsrc))
                        (:div
                         (:div
                          :key 1
                          :class "aside"
                          (case direction
                            (:pro "Link supports parent article")
                            (:con "Link contradicts parent article")
                            (:neutral "Link has undetermined effect on parent article")))
                         (:opinion-info
                          :key 2
                          :... (@ this props)
                          :opinion opinion))))))
              (prop children)))
           (prop children)))))))

(defun %grouped-warstats-urls (group)
  (let ((res (create)))
    (dolist (item group)
      (when (chain item (has-own-property :rootid))
        (setf (getprop res (@ item rootid))
              (make-warstats-url (@ item rootid) 'warstats))))
    res))

(def-component grouped-loader
  nil
  (defun render ()
    (psx
     (:json-loader
      :key 1
      :sources (list "/static/warstats/grouped.json")
      (:grouped-core :key 1 :... (propsref))))))

(def-component grouped-core
  nil
  (defun render ()
    (let-context
     ((opinion-store (prop opinion-store))
      (warstats-store (prop warstats-store))
      (headlines (prop headlines)))
     (collecting
       (dolist (group (ensure-array (prop groups)))
         (collect (psx (:grouped :key (unique-id) :keywords (prop keywords) :group group))))))))

(def-component grouped-main
  nil
  (defun render ()
    (psx
     (:div
      :key 1
      (:h2 :key 1 "Discussions:")
      (:grouped-loader :key 2)))))

